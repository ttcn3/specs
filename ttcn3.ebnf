// TTCN-3 Grammar
// ==============
//
// This Grammar is still very much work in progress.
//


//
// Modules, module defintions and declarations.
// --------------------------------------------
//

Module = "module" Name [Language] "{" Decls "}" [With] [";"].

Decls = { Decl [";"] }.

Decl = Altstep
     | AltstepType
     | Class
     | Component
     | Config
     | Constructor
     | Destructor
     | Enum
     | Friend
     | Function
     | FunctionType
     | Group
     | Import
     | List
     | Map
     | Port
     | Signature
     | Struct
     | SubType
     | Template
     | Testcase
     | TestcaseType
     | VarDecl
     .

Group = [Visibility] "group" Name "{" Decls "}" [With].

Friend = [Visibility] "friend" "module" Refs [With].

Import = [Visibility] "import" "from" Ref ["->" Name] ("all" [ExceptSpec] | ImportSpec) [With].

ExceptSpec = "except" "{" { ExceptStmt [";"] } "}".
ExceptStmt = ImportKind (Refs|"all")
           | "group"    (Refs|"all")
           .

ImportSpec = "{" { ImportStmt [";"] } "}".
ImportStmt = ImportKind (Refs|"all" ["except" Refs])
           | "group"    {Ref [ExceptSpec]}
           .

ImportKind
    = "altstep"
    | "const"
    | "function"
    | "import"
    | "modulepar"
    | "signature"
    | "template"
    | "testcase"
    | "type"
    .

// Signature declaration
Signature = [Visibility] "signature" Name FormalPars [Return] ["noblock"] [Exception] [With].

// Component declaration
Component = [Visibility] "type" "component" Name [Extends] Block [With].

// Port declaration
Port = [Visibility] "type" "port" Name PortKind {PortSpec} "{" {PortAttribute [";"]} "}" [With].

PortKind = "message"
         | "procedure"
	 | "stream"
	 .

PortSpec = "realtime"
         | "map" "to" Refs
	 | "connect" "to" Refs
	 .

PortAttribute = "map"   "param" FormalPars
              | "unmap" "param" FormalPars
              | "address" Ref [PortTranslation]
              | ("in"|"out"|"inout") PortElement {"," PortElement} [","]
              .

PortElement = Ref [PortTranslation].
PortTranslation =("from"|"to") Ref "with" Ref "(" ")".

// User defined types

SubType = [Visibility] "type" Ref Name {ArrayDef} [ValueConstraints] [With].

Struct = [Visibility] "type" StructKind Name
        "{"
           StructMember {[","|";"] StructMember} [","|";"]
	"}" [With].

StructKind = "record" | "set" | "union".

StructMember = ["@default"] NestedType Name {ArrayDef} [ValueConstraints].

List = [Visibility] "type" ListKind ["length" "(" Expr ")"] "of" NestedType Name [With].
ListKind = "record" | "set".

Enum = [Visibility] "type" "enumerated" Name
      "{"
          EnumLabel {[","|";"] EnumLabel} [","|";"]
      "}" [With].

EnumLabel = Name ["(" Expr ")"].

Map = [Visibility] "type" "map" "from" Ref "to" Ref Name [With].

Class = [Visibility] "type" ["external"] "class" {modif} Name [Extends] {ConfigSpec} "{" Decls "}" ["finally" Block] [With].

Constructor = [Visibility] "create" FormalPars ["external" FormalPars] [":" Ref "(" [Exprs] ")" ] [Block] .
Destructor = "finally" Block.

TestcaseType = [Visibility] "type" "testcase" Name FormalPars {ConfigSpec} [With].

FunctionType = [Visibility] "type" "function" {modif} Name FormalPars {ConfigSpec} [ReturnSpec] [With].

AltstepType = [Visibility] "type" "altstep" {modif} ["interleave"] Name FormalPars {ConfigSpec} [With].


// Variable declaration and module parameters.

VarDecl = [Visibility] ("const"|"var"|"modulepar") [NestedTemplate] {modif} Ref Declarator { "," Declarator} [With].

TimerDecl = "timer" Declarator { "," Declarator} [With].
PortDecl = "port" Ref Declarator { "," Declarator} [With].

// Template declaration
Template = [Visibility] "template" [ "(" TemplateRestriction ")"] {modif} Ref Name [FormalPars] ["modifies" Ref] ":=" Expr [With].

// Testcase declaration
Testcase = [Visibility] "testcase" Name FormalPars {ConfigSpec} Block.

// Function declaration
Function = [Visibility] ["external"] "function" {modif} Name FormalPars {ConfigSpec} [ReturnSpec] [Exception] [Block] [With].

// Configuration declaration
Config = [Visibility] "configuration" Name FormalPars {ConfigSpec} Block [With].

// Altstep declaration
Altstep = [Visibility] "altstep" {modif} ["interleave"] Name FormalPars {ConfigSpec} Block [With].

//
// Statements
// ----------
//

Stmt
    = AltStmt
    | Block
    | DoStmt
    | Expr
    | ForStmt
    | GotoStmt
    | GuardStmt
    | IfStmt
    | LabelStmt
    | PortDecl
    | ReturnStmt
    | SelectStmt
    | Template
    | TimerDecl
    | VarDecl
    | WhileStmt
    .

IfStmt     = "if" "(" [(AssignStmt|VarDecl) ";"] Expr ")" Block {"else" "if" "(" Expr ")"} ["else" Block].
SelectStmt = "select" ["union"|"class"] "(" Expr ")" "{" { "case" ("else"|"(" Expr ")") Block } "}".
ForStmt    = "for" "(" (AssignStmt|VarDecl) ("in" Ref|";" Expr";" AssignStmt) ")" Block.
WhileStmt  = "while" "(" Expr ")" Block.
DoStmt     = "do" Block "while" "(" Expr ")".
GotoStmt   = "goto" Ref.
LabelStmt  = "label" Name.
ReturnStmt = "return" [Expr].
AltStmt    = ("alt"|"interleave") {modif} Block.
AssignStmt = Ref ":=" Expr.
GuardStmt  = "[" [Expr] "]" Stmt.


Block = BasicBlock ["catch" "(" Ref Name ")" BasicBlock] ["finally" BasicBlock].

BasicBlock = "{" { Stmt [";"] } "}".

//
// Expressions
// -----------
//

Expr = PrimaryExpr
     | Literal
     | UnaryExpr
     | BinaryExpr
     .

PrimaryExpr = ID { "." ID | "[" Expr "]" | "(" Exprs ")" }.

Literal = int
        | float
	| string
	| bitstring
	| boolean
	| verdict
	| "-"
	.

UnaryExpr = "!" Expr
          | "+" Expr
	  | "-" Expr
          | "not" Expr
          | "not4b" Expr
	  .

BinaryExpr = Expr ":=" Expr
           | Expr ":" Expr
           | Expr "=>" Expr
           | Expr ".." Expr
           | Expr "of" Expr
           | Expr "or" Expr
           | Expr "xor" Expr
           | Expr "and" Expr
           | Expr "==" Expr
           | Expr "!=" Expr
           | Expr "<" Expr
           | Expr "<=" Expr
           | Expr ">" Expr
           | Expr ">=" Expr
           | Expr "<@" Expr
           | Expr "<<" Expr
           | Expr ">>" Expr
           | Expr "@>" Expr
           | Expr "or4b" Expr
           | Expr "xor4b" Expr
           | Expr "and4b" Expr
           | Expr "+" Expr
           | Expr "-" Expr
           | Expr "&" Expr
           | Expr "*" Expr
           | Expr "/" Expr
           | Expr "rem" Expr
           | Expr "mod" Expr
           | Expr "::" Expr
	   .

Ref = id [TypePars]
    | "address"
    | "all" "component"
    | "all" "port"
    | "all" "timer"
    | "any"
    | "any" "component"
    | "any" "port"
    | "any" "timer"
    | "map"
    | "mtc"
    | "self"
    | "system"
    | "this"
    | "timer"
    | "unmap"
    .

TypePars = "<" TypePar { ","  Typepar } [","] ">" .

TypePar = [ Name ":=" ] NestedType .

//
// Fragments, building blocks and helpers
// --------------------------------------
//

With     = "with" "{" {WithStmt} "}".

WithStmt =  ("encode"|"variant"|"display"|"extension"|"optional") ["override"|"@local"] ["(" WithQualifier [","] ")"] string.

WithQualifier
    = Ref
    | "[" Expr "]"
    | WithKind [ "except" "{" Refs "}" ]
    .

WithKind
    = "altstep"
    | "const"
    | "function"
    | "group"
    | "modulepar"
    | "signature"
    | "template"
    | "testcase"
    | "type"
    .

Refs = Ref { "," Ref } [","].

Extends = "extends" Refs.
Language = "language" string { "," string } [","].
ReturnSpec = "return" [NestedTemplate] Ref {ArrayDef} .

ValueConstraints = "(" Expr { "," Expr } [","] ")".

ConfigSpec
    = "runs" "on" Ref
    | "system" Ref
    | "mtc" Ref
    | "port" Ref
    | "execute" "on" Ref
    .

Exception = "exception" "(" Refs ")".


Visibility = "private"|"public"|"friend".

Name = id.

FormalTypePars = "<" FormalTypePar {"," FormalTypePar} [","] ">".
FormalTypePar = ["in"] ("type"|"signature"|Ref) Declarator.

FormalPars = "(" FormalPar {"," FormalPar} [","] ")".
FormalPar = ("in"|"out"|"inout") Ref Declarator.

Declarator = Name {ArrayDef} [":=" Expr].

ArrayDef = "[" Expr "]".

TemplateRestriction = "omit" | "value" | "present".


NestedTemplate
    = "template"
    | "template" "(" TemplateRestriction ")"
    | TemplateRestriction
    .


NestedType
    = Ref
    | NestedStruct
    | NestedList
    | NestedEnum
    .

NestedStruct = ("record"|"set"|"union") "{" StructMember {[","|";"] StructMember} [","|";"] "}".
NestedList = ("record"|"set") ["length" "(" Expr ")"] "of" NestedType.
NestedEnum = "enumerated" "{" EnumLabel {[","|";"] EnumLabel} [","|";"] "}".

int = .
float = .
id = .
string = .
modif = .
boolean = "true" | "false" .
verdict = "error" | "fail" | "inconc" | "none" | "pass" .
bitstring = .

